// ===== Цикл WHILE - будет выполняться пока условие истинно, т.е пока не пройдет три итерации. Если бы строка i++ отсутствовала то цикл бы повторялся вечно

// let i = 0;
// while(i < 3) {
// 	console.log(i);
// 	i++
// }

//  например while(i) - более краткий вариант while(i != 0)

// let j = 3
// while(j){
// 	console.log(j);
// 	j--
// }

// ===== Цикл DO WHILE - сначала выполнит тело, потом проверит условие и пока его значение - true будет выполняться снова и снова. Данный цикл оправдан если мы хотим чтобы тело цикла выполнилось хотя бы один раз

// let k = 0;
// do {
// 	console.log(k);
// 	k++
// } while (k < 5)

// ===== Цикл FOR более сложный, но самый распространённый цикл. начало - let i = 0; условие - i < 3; шаг - i++; тело console.log(i)

// for (let i = 0; i < 3; i++) {
// 	console.log(i)
// }

// алгоритм работы цикла выглядит следующим образом:
// Выполнить начало
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → ...

// В примере переменная счётчика i была объявлена прямо в цикле. Это так называемое «встроенное» объявление переменной. Такие переменные существуют только внутри цикла.

// Пропуск частей «for»
// Любая часть for может быть пропущена.
// Для примера, мы можем пропустить начало если нам ничего не нужно делать перед стартом цикла.
// let i = 0 // мы уже имеем объявленную i с присвоенным значением

// for (; i < 3; i++) {
// нет необходимости в "начале"
// 	alert(i) // 0, 1, 2
// }
// Можно убрать и шаг:
// let i = 0;

// for (; i < 3;) {
//   alert( i++ );
// }
// Это сделает цикл аналогичным while (i < 3).

// А можно и вообще убрать всё, получив бесконечный цикл:
// for (;;) {
// будет выполняться вечно
// }
// При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.
// let i = 0;
// for(; i < 3; i++) {
// 	console.log(i);
// }

// ===== Прерывание цикла: «break»
// Обычно цикл завершается при вычислении условия в false.
// Но мы можем выйти из цикла в любой момент с помощью специальной директивы break.
// Например, следующий код подсчитывает сумму вводимых чисел до тех пор, пока посетитель их вводит, а затем – выдаёт:

// let sum = 0

// while (true) {
// 	let value = +prompt('Введите число', '')

// 	if (!value) break // (*)

// 	sum += value
// }
// alert('Сумма: ' + sum)

// Директива break в строке (*) полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert.
// Вообще, сочетание «бесконечный цикл + break» – отличная штука для тех ситуаций, когда условие, по которому нужно прерваться, находится не в начале или конце цикла, а посередине или даже в нескольких местах его тела.

// ===== Переход к следующей итерации: continue
// Директива continue – «облегчённая версия» break. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).
// Её используют, если понятно, что на текущем повторе цикла делать больше нечего.
// Например, цикл ниже использует continue, чтобы выводить только нечётные значения:
for (let i = 0; i < 10; i++) {
	// если true, пропустить оставшуюся часть тела цикла
	if (i % 2 == 0) continue

	alert(i) // 1, затем 3, 5, 7, 9
}