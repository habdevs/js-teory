// ===== Цикл WHILE - будет выполняться пока условие истинно, т.е пока не пройдет три итерации. Если бы строка i++ отсутствовала то цикл бы повторялся вечно

// let i = 0;
// while(i < 3) {
// 	console.log(i);
// 	i++
// }

//  например while(i) - более краткий вариант while(i != 0)

// let j = 3
// while(j){
// 	console.log(j);
// 	j--
// }

// ===== Цикл DO WHILE - сначала выполнит тело, потом проверит условие и пока его значение - true будет выполняться снова и снова. Данный цикл оправдан если мы хотим чтобы тело цикла выполнилось хотя бы один раз

// let k = 0;
// do {
// 	console.log(k);
// 	k++
// } while (k < 5)

// ===== Цикл FOR более сложный, но самый распространённый цикл. начало - let i = 0; условие - i < 3; шаг - i++; тело console.log(i)

// for (let i = 0; i < 3; i++) {
// 	console.log(i)
// }

// алгоритм работы цикла выглядит следующим образом:
// Выполнить начало
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → ...

// В примере переменная счётчика i была объявлена прямо в цикле. Это так называемое «встроенное» объявление переменной. Такие переменные существуют только внутри цикла.

// Пропуск частей «for»
// Любая часть for может быть пропущена.
// Для примера, мы можем пропустить начало если нам ничего не нужно делать перед стартом цикла.
// let i = 0 // мы уже имеем объявленную i с присвоенным значением

// for (; i < 3; i++) {
// нет необходимости в "начале"
// 	alert(i) // 0, 1, 2
// }
// Можно убрать и шаг:
// let i = 0;

// for (; i < 3;) {
//   alert( i++ );
// }
// Это сделает цикл аналогичным while (i < 3).

// А можно и вообще убрать всё, получив бесконечный цикл:
// for (;;) {
// будет выполняться вечно
// }
// При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.
// let i = 0;
// for(; i < 3; i++) {
// 	console.log(i);
// }

// ===== Прерывание цикла: «break»
// Обычно цикл завершается при вычислении условия в false.
// Но мы можем выйти из цикла в любой момент с помощью специальной директивы break.
// Например, следующий код подсчитывает сумму вводимых чисел до тех пор, пока посетитель их вводит, а затем – выдаёт:

// let sum = 0

// while (true) {
// 	let value = +prompt('Введите число', '')

// 	if (!value) break // (*)

// 	sum += value
// }
// alert('Сумма: ' + sum)

// Директива break в строке (*) полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert.
// Вообще, сочетание «бесконечный цикл + break» – отличная штука для тех ситуаций, когда условие, по которому нужно прерваться, находится не в начале или конце цикла, а посередине или даже в нескольких местах его тела.

// ===== Переход к следующей итерации: continue
// Директива continue – «облегчённая версия» break. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).
// Её используют, если понятно, что на текущем повторе цикла делать больше нечего.
// Например, цикл ниже использует continue, чтобы выводить только нечётные значения:
// for (let i = 0; i < 10; i++) {
// 	// если true, пропустить оставшуюся часть тела цикла
// 	if (i % 2 == 0) continue

// 	alert(i) // 1, затем 3, 5, 7, 9
// }

// ===== Метки для break/continue
// for (let i = 0; i < 3; i++) {
// 	for (let j = 0; j < 3; j++) {
// 		let input = prompt(`Значение на координатах (${i},${j})`, '')
// 		// Что если мы захотим перейти к Готово (ниже) прямо отсюда?
// 	}
// }
// alert('Готово!')


// TASK ==================================================================

// Последнее значение цикла
// важность: 3
// Какое последнее значение выведет этот код? Почему?

// let i = 3

// while (i) {
// 	alert(i--)
// }

// Какие значения выведет цикл while?
// важность: 4
// Для каждого цикла запишите, какие значения он выведет. Потом сравните с ответом.
// Оба цикла выводят alert с одинаковыми значениями или нет?

// Префиксный вариант ++i:
// let i = 0;
// while (++i < 5) alert( i );  

// Постфиксный вариант i++
// let i = 0;
// while (i++ < 5) alert( i ); 


// Какие значения выведет цикл for?
// важность: 4
// Для каждого цикла запишите, какие значения он выведет. Потом сравните с ответом.

// Оба цикла выведут alert с одинаковыми значениями или нет?
// Постфиксная форма:
// for (let i = 0; i < 5; i++) alert( i ); 

// Префиксная форма:
// for (let i = 0; i < 5; ++i) alert( i );

// Выведите чётные числа
// важность: 5
// При помощи цикла for выведите чётные числа от 2 до 10.
// for (let i = 2; i <= 10; i++) {
// 	if (i % 2 == 0) {
// 		console.log(i)
// 	}
// }

// Замените for на while
// важность: 5
// Перепишите код, заменив цикл for на while, без изменения поведения цикла.
// 
// let i = 0
// while(i < 3){
// 	console.log(`number ${i}!`)
// 	i++;
// }


// Повторять цикл, пока ввод неверен
// важность: 5
// Напишите цикл, который предлагает prompt ввести число, большее 100. Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.

// Цикл должен спрашивать число пока либо посетитель не введёт число, большее 100, либо не нажмёт кнопку Отмена (ESC).

// Предполагается, что посетитель вводит только числа. Предусматривать обработку нечисловых строк в этой задаче необязательно.

// let num

// do {
// 	num = prompt('Введите число больше 100?', 0)
// } while (num <= 100 && num)

// let num;
//  do{
// 	num = prompt('print number', 0)
//  } while (num <= 100 && num)


// Вывести простые числа
// важность: 3
// Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.
// Другими словами, n > 1 – простое, если при его делении на любое число кроме 1 и n есть остаток.
// Например, 5 это простое число, оно не может быть разделено без остатка на 2, 3 и 4.
// Напишите код, который выводит все простые числа из интервала от 2 до n.
// Для n = 10 результат должен быть 2,3,5,7.
// P.S. Код также должен легко модифицироваться для любых других интервалов.
// const n = 10;
// for (let i = 1; i <= n; i++) {
// 	for (let j = 2; j <= i; j++) {
// 		if (i % j === 0 && j < i) {
// 			break
// 		} else if (j === i) {
// 			console.log(i)
// 		}
// 	}
// }
// ++++++++++ РЕШЕТО ЭРАТОСФЕНА +++++++++++++
// function isPrime(num) {
// 	const save = []
// 	const primes = []

// 	for (let i = 2; i <= num; i++) {
// 		if (!save[i]) {
// 			primes.push(i)

// 			for (let j = i * i; j <= num; j += i) {
// 				save[j] = true
// 			}
// 		}
// 	}
// 	return primes
// }

// console.log(isPrime(100))
